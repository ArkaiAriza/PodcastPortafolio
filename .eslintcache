[{"C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\index.js":"1","C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\components\\App.js":"2","C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\theme.js":"3","C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\contexts\\PodcastContext.js":"4","C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\keys.js":"5","C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\devKeys.js":"6","C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\history.js":"7","C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\components\\LandingPage.js":"8","C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\components\\PlayComponent.js":"9","C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\components\\SearchResults.js":"10","C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\components\\PodcastInfo.js":"11","C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\apis\\listennotes.js":"12","C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\components\\SearchBar.js":"13","C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\components\\ItemsGrid.js":"14","C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\components\\Card.js":"15"},{"size":162,"mtime":1608987966576,"results":"16","hashOfConfig":"17"},{"size":946,"mtime":1608997580462,"results":"18","hashOfConfig":"17"},{"size":405,"mtime":1609084577090,"results":"19","hashOfConfig":"17"},{"size":2689,"mtime":1609015335075,"results":"20","hashOfConfig":"17"},{"size":415,"mtime":1608990158526,"results":"21","hashOfConfig":"17"},{"size":72,"mtime":1608988590309,"results":"22","hashOfConfig":"17"},{"size":89,"mtime":1608988314563,"results":"23","hashOfConfig":"17"},{"size":49028,"mtime":1609180403516,"results":"24","hashOfConfig":"17"},{"size":5661,"mtime":1609108584332,"results":"25","hashOfConfig":"17"},{"size":3445,"mtime":1609182157104,"results":"26","hashOfConfig":"17"},{"size":2832,"mtime":1609181867350,"results":"27","hashOfConfig":"17"},{"size":215,"mtime":1608993561139,"results":"28","hashOfConfig":"17"},{"size":1382,"mtime":1609180453181,"results":"29","hashOfConfig":"17"},{"size":2529,"mtime":1609181535323,"results":"30","hashOfConfig":"17"},{"size":2386,"mtime":1609179858369,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"fez1d3",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\index.js",[],["65","66"],"C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\components\\App.js",[],"C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\theme.js",[],"C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\contexts\\PodcastContext.js",["67"],"import React, { useState, useEffect } from 'react';\r\nimport axios from '../apis/listennotes';\r\n\r\nconst PodcastContext = React.createContext({\r\n  term: '',\r\n  podcastList: [],\r\n  episodesList: [],\r\n  selectedEpisode: {},\r\n  selectedPodcast: {},\r\n  genres: [],\r\n  selectedGenre: {},\r\n  results: {\r\n    podcastList: [],\r\n    episodesList: [],\r\n  },\r\n});\r\n\r\nexport const PodcastProvider = ({ children }) => {\r\n  const [podcastList, setPodcastList] = useState([]);\r\n  const [episodeList, setEpisodeList] = useState([]);\r\n  const [genres, setGenres] = useState([]);\r\n  const [selectedGenre, setSelectedGenre] = useState({});\r\n  const [page, setPage] = useState(1);\r\n  const [selectedPodcast, setSelectedPodcast] = useState({});\r\n  const [selectedEpisode, setSelectedEpisode] = useState({});\r\n  const [results, setResults] = useState({\r\n    podcastList: [],\r\n    episodesList: [],\r\n  });\r\n\r\n  const getBestPodcasts = async () => {\r\n    const response = await axios.get(`/best_podcasts?page=${page}&region=us`);\r\n    setPodcastList(response.data.podcasts);\r\n  };\r\n\r\n  const getBestPodcastsByGenre = async () => {\r\n    if (genres) {\r\n      const response = await axios.get(\r\n        `/best_podcasts?genre_id=${selectedGenre.id}&page=${page}&region=us`\r\n      );\r\n      setPodcastList(response.data.podcasts);\r\n    }\r\n  };\r\n\r\n  const getGenres = async () => {\r\n    const response = await axios.get('/genres?top_level_only=1');\r\n    setGenres(response.data.genres);\r\n  };\r\n\r\n  const getEpisodesByPodcastId = async (podcastId) => {\r\n    const response = await axios.get(\r\n      `/podcasts/${podcastId}?sort=oldest_first`\r\n    );\r\n    setEpisodeList(response.data.episodes);\r\n  };\r\n\r\n  const searchInfo = async (text) => {\r\n    const responsePodcast = await axios.get(`/search?q=${text}&type=podcast`);\r\n    const responseEpisodes = await axios.get(`/search?q=${text}&type=episode`);\r\n    setResults({\r\n      ...results,\r\n      podcastList: responsePodcast.data.results,\r\n      episodesList: responseEpisodes.data.results,\r\n    });\r\n  };\r\n\r\n  /* useEffect(() => {\r\n  }, []); */\r\n\r\n  return (\r\n    <PodcastContext.Provider\r\n      value={{\r\n        genres,\r\n        podcastList,\r\n        selectedGenre,\r\n        page,\r\n        results,\r\n        setResults,\r\n        selectedPodcast,\r\n        setSelectedPodcast,\r\n        selectedEpisode,\r\n        setSelectedEpisode,\r\n        episodeList,\r\n        setEpisodeList,\r\n        setPage,\r\n        setSelectedGenre,\r\n        getGenres,\r\n        getBestPodcastsByGenre,\r\n        getBestPodcasts,\r\n        getEpisodesByPodcastId,\r\n        searchInfo,\r\n      }}\r\n    >\r\n      {children}\r\n    </PodcastContext.Provider>\r\n  );\r\n};\r\n\r\nexport default PodcastContext;\r\n","C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\keys.js",[],"C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\devKeys.js",[],"C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\history.js",[],"C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\components\\LandingPage.js",["68","69"],"C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\components\\PlayComponent.js",["70","71"],"import React, { useContext, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid, IconButton } from '@material-ui/core';\r\nimport { ExpandLess, ExpandMore } from '@material-ui/icons';\r\nimport AudioPlayer from 'react-modular-audio-player';\r\nimport styled from 'styled-components';\r\n\r\nimport PodcastContext from '../contexts/PodcastContext';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    position: 'fixed',\r\n    bottom: 0,\r\n    width: '-webkit-fill-available',\r\n  },\r\n  playerContainer: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n  player: {\r\n    position: 'fixed',\r\n    bottom: 10,\r\n    zIndex: 1,\r\n    width: '80%',\r\n    textAlign: '-webkit-center',\r\n    margin: '0 0 1vh 22vh',\r\n  },\r\n  expandedContainer: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    position: 'fixed',\r\n    bottom: 0,\r\n    width: '-webkit-fill-available',\r\n    minHeight: '100vh',\r\n  },\r\n  expandedContent: {\r\n    bottom: 50,\r\n    position: 'absolute',\r\n  },\r\n  expandedPlayerContainer: {\r\n    position: 'fixed',\r\n    bottom: 10,\r\n    zIndex: 1,\r\n    width: '-webkit-fill-available',\r\n    textAlign: '-webkit-center',\r\n    margin: '0 0 3vh 0',\r\n  },\r\n  expandedPlayerDescription: {\r\n    fontFamily: 'Arial',\r\n    fontSize: 20,\r\n    color: theme.palette.primary.contrastText,\r\n  },\r\n  expandedPlayerTitle: {\r\n    fontFamily: 'Arial',\r\n    fontSize: 30,\r\n    fontWeight: 'bold',\r\n    margin: '1vh 18vw',\r\n    color: theme.palette.primary.light,\r\n  },\r\n}));\r\n\r\nconst StyledDescription = styled(Grid)`\r\n  display: flex;\r\n  padding: 0px;\r\n  margin: 10vh 0;\r\n  max-height: 20vh;\r\n  overflow: auto;\r\n  margin: 3vh 20vw;\r\n  ::-webkit-scrollbar {\r\n    background-color: #232323;\r\n    width: 5px;\r\n  }\r\n  ::-webkit-scrollbar-thumb {\r\n    background-color: #c7c7c7;\r\n    width: 5px;\r\n  }\r\n`;\r\n\r\nconst PlayComponent = () => {\r\n  const classes = useStyles();\r\n  const { selectedEpisode } = useContext(PodcastContext);\r\n\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n\r\n  let playlist = [\r\n    {\r\n      src: selectedEpisode.audio,\r\n      title: selectedEpisode.title_original\r\n        ? selectedEpisode.title_original\r\n        : selectedEpisode.title,\r\n      artist: '',\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!isExpanded ? (\r\n        <div className={classes.container}>\r\n          <Grid className={classes.playerContainer}>\r\n            <Grid\r\n              item\r\n              xs={4}\r\n              style={{\r\n                display: 'flex',\r\n                padding: 0,\r\n              }}\r\n            >\r\n              <IconButton>\r\n                <ExpandLess\r\n                  style={{\r\n                    fontSize: 50,\r\n                    color: 'black',\r\n                  }}\r\n                  onClick={() => setIsExpanded(!isExpanded)}\r\n                />\r\n              </IconButton>\r\n\r\n              <img\r\n                src={selectedEpisode.thumbnail}\r\n                height=\"60vh\"\r\n                style={{ paddingTop: 10 }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      ) : (\r\n        <div className={classes.expandedContainer}>\r\n          <Grid>\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              style={{\r\n                display: 'flex',\r\n                padding: 0,\r\n              }}\r\n            >\r\n              <IconButton>\r\n                <ExpandMore\r\n                  style={{\r\n                    fontSize: 50,\r\n                    color: 'black',\r\n                  }}\r\n                  onClick={() => setIsExpanded(!isExpanded)}\r\n                />\r\n              </IconButton>\r\n            </Grid>\r\n            <div className={classes.expandedContent}>\r\n              <Grid\r\n                item\r\n                xs={12}\r\n                style={{\r\n                  display: 'flex',\r\n                  padding: 0,\r\n                }}\r\n              >\r\n                <img\r\n                  src={selectedEpisode.thumbnail}\r\n                  style={{ margin: 'auto' }}\r\n                />\r\n              </Grid>\r\n              <StyledDescription>\r\n                <div\r\n                  className={classes.expandedPlayerDescription}\r\n                  dangerouslySetInnerHTML={\r\n                    selectedEpisode.description\r\n                      ? { __html: selectedEpisode.description }\r\n                      : { __html: selectedEpisode.description_original }\r\n                  }\r\n                />\r\n              </StyledDescription>\r\n              <Grid\r\n                item\r\n                xs={12}\r\n                style={{\r\n                  display: 'flex',\r\n                  padding: 0,\r\n                  justifyContent: 'center',\r\n                  margin: '10vh 0',\r\n                }}\r\n              >\r\n                <div\r\n                  className={classes.expandedPlayerTitle}\r\n                  dangerouslySetInnerHTML={\r\n                    selectedEpisode.title\r\n                      ? { __html: selectedEpisode.title }\r\n                      : { __html: selectedEpisode.title_original }\r\n                  }\r\n                />\r\n              </Grid>\r\n            </div>\r\n          </Grid>\r\n        </div>\r\n      )}\r\n      <div\r\n        className={\r\n          !isExpanded ? classes.player : classes.expandedPlayerContainer\r\n        }\r\n      >\r\n        <AudioPlayer\r\n          audioFiles={playlist}\r\n          fontFamily=\"serif\"\r\n          fontSize=\"1.5vw\"\r\n          playerWidth=\"50vw\"\r\n          iconSize=\"1.85vw\"\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PlayComponent;\r\n","C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\components\\SearchResults.js",["72"],"C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\components\\PodcastInfo.js",["73","74"],"C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\apis\\listennotes.js",[],"C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\components\\SearchBar.js",[],"C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\components\\ItemsGrid.js",["75"],"C:\\Users\\macas\\Documents\\GitHub\\PodcastPortafolio\\src\\components\\Card.js",["76"],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":1,"column":27,"nodeType":"83","messageId":"84","endLine":1,"endColumn":36},{"ruleId":"81","severity":1,"message":"85","line":3,"column":40,"nodeType":"83","messageId":"84","endLine":3,"endColumn":47},{"ruleId":"81","severity":1,"message":"86","line":1101,"column":5,"nodeType":"83","messageId":"84","endLine":1101,"endColumn":14},{"ruleId":"87","severity":1,"message":"88","line":118,"column":15,"nodeType":"89","endLine":122,"endColumn":17},{"ruleId":"87","severity":1,"message":"88","line":156,"column":17,"nodeType":"89","endLine":159,"endColumn":19},{"ruleId":"87","severity":1,"message":"88","line":68,"column":15,"nodeType":"89","endLine":77,"endColumn":17},{"ruleId":"90","severity":1,"message":"91","line":51,"column":6,"nodeType":"92","endLine":51,"endColumn":8,"suggestions":"93"},{"ruleId":"87","severity":1,"message":"88","line":59,"column":15,"nodeType":"89","endLine":59,"endColumn":62},{"ruleId":"81","severity":1,"message":"94","line":1,"column":17,"nodeType":"83","messageId":"84","endLine":1,"endColumn":27},{"ruleId":"81","severity":1,"message":"95","line":8,"column":3,"nodeType":"83","messageId":"84","endLine":8,"endColumn":13},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Divider' is defined but never used.","'getGenres' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getEpisodesByPodcastId' and 'selectedPodcast.id'. Either include them or remove the dependency array.","ArrayExpression",["98"],"'useContext' is defined but never used.","'Typography' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},"Update the dependencies array to be: [getEpisodesByPodcastId, selectedPodcast.id]",{"range":"101","text":"102"},[1309,1311],"[getEpisodesByPodcastId, selectedPodcast.id]"]